From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sun, 8 Jul 2018 18:16:34 +0200
Subject: Disable fetching of all field trials

Disable seed-based field trials.
Disable reporting of Omnibox suggestions header.

License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---

diff --git a/chrome/browser/net/system_network_context_manager.cc b/chrome/browser/net/system_network_context_manager.cc
--- a/chrome/browser/net/system_network_context_manager.cc
+++ b/chrome/browser/net/system_network_context_manager.cc
@@ -827,8 +827,6 @@ void SystemNetworkContextManager::AddSSLConfigToNetworkContextParams(
     network::mojom::NetworkContextParams* network_context_params,
     cert_verifier::mojom::CertVerifierCreationParams*
         cert_verifier_creation_params) {
-  variations::UpdateCorsExemptHeaderForVariations(network_context_params);
-  GoogleURLLoaderThrottle::UpdateCorsExemptHeader(network_context_params);
 
   network_context_params->enable_brotli = true;
 
diff --git a/components/ukm/ukm_recorder_impl.cc b/components/ukm/ukm_recorder_impl.cc
--- a/components/ukm/ukm_recorder_impl.cc
+++ b/components/ukm/ukm_recorder_impl.cc
@@ -166,6 +166,9 @@ bool HasUnknownMetrics(const builders::DecodeMap& decode_map,
 
 UkmRecorderImpl::UkmRecorderImpl()
     : sampling_seed_(static_cast<uint32_t>(base::RandUint64())) {
+  if ((true))
+    return;
+
   max_kept_sources_ =
       static_cast<size_t>(base::GetFieldTrialParamByFeatureAsInt(
           kUkmFeature, "MaxKeptSources", max_kept_sources_));
diff --git a/components/variations/net/BUILD.gn b/components/variations/net/BUILD.gn
--- a/components/variations/net/BUILD.gn
+++ b/components/variations/net/BUILD.gn
@@ -34,8 +34,6 @@ static_library("net") {
   # third_party/blink/public/common does not build on iOS
   if (!is_ios) {
     sources += [
-      "variations_url_loader_throttle.cc",
-      "variations_url_loader_throttle.h",
     ]
     deps += [
       "//components/variations:variations_mojom",
diff --git a/components/variations/net/omnibox_http_headers.cc b/components/variations/net/omnibox_http_headers.cc
--- a/components/variations/net/omnibox_http_headers.cc
+++ b/components/variations/net/omnibox_http_headers.cc
@@ -21,7 +21,7 @@ const char kOmniboxOnDeviceSuggestionsHeader[] =
 // Whether to enable reporting the header. Included as a quick escape hatch in
 // case of crashes.
 const base::Feature kReportOmniboxOnDeviceSuggestionsHeader{
-    "ReportOmniboxOnDeviceSuggestionsHeader", base::FEATURE_ENABLED_BY_DEFAULT};
+    "ReportOmniboxOnDeviceSuggestionsHeader", base::FEATURE_DISABLED_BY_DEFAULT};        //  disabled by default in Bromite
 
 std::string GetHeaderValue() {
   const std::string group =
diff --git a/components/variations/service/variations_service.cc b/components/variations/service/variations_service.cc
--- a/components/variations/service/variations_service.cc
+++ b/components/variations/service/variations_service.cc
@@ -601,7 +592,7 @@ bool VariationsService::DoFetchFromURL(const GURL& url, bool is_http_retry) {
   // debugger or if the machine was suspended) and OnURLFetchComplete() hasn't
   // had a chance to run yet from the previous request. In this case, don't
   // start a new request and just let the previous one finish.
-  if (pending_seed_request_)
+  if ((true) || pending_seed_request_)
     return false;
 
   last_request_was_http_retry_ = is_http_retry;
diff --git a/content/browser/loader/url_loader_throttles.cc b/content/browser/loader/url_loader_throttles.cc
--- a/content/browser/loader/url_loader_throttles.cc
+++ b/content/browser/loader/url_loader_throttles.cc
@@ -50,8 +50,6 @@ CreateContentBrowserURLLoaderThrottles(
   // TODO(crbug.com/1094303): Consider whether we want to use the WebContents to
   // determine the value for variations::Owner. Alternatively, this is the
   // browser side, and we might be fine with Owner::kUnknown.
-  variations::VariationsURLLoaderThrottle::AppendThrottleIfNeeded(
-      browser_context->GetVariationsClient(), &throttles);
 
   ClientHintsControllerDelegate* client_hint_delegate =
       browser_context->GetClientHintsControllerDelegate();
diff --git a/content/renderer/variations_render_thread_observer.cc b/content/renderer/variations_render_thread_observer.cc
--- a/content/renderer/variations_render_thread_observer.cc
+++ b/content/renderer/variations_render_thread_observer.cc
@@ -56,15 +56,6 @@ void VariationsRenderThreadObserver::AppendThrottleIfNeeded(
     const url::Origin& top_frame_origin,
     std::vector<std::unique_ptr<blink::URLLoaderThrottle>>* throttles) {
   variations::OmniboxURLLoaderThrottle::AppendThrottleIfNeeded(throttles);
-
-  variations::mojom::VariationsHeadersPtr variations_headers =
-      GetVariationsData()->GetVariationsHeaders();
-
-  if (!variations_headers.is_null()) {
-    throttles->push_back(
-        std::make_unique<variations::VariationsURLLoaderThrottle>(
-            std::move(variations_headers), top_frame_origin));
-  }
 }
 
 void VariationsRenderThreadObserver::RegisterMojoInterfaces(
diff --git a/third_party/blink/renderer/core/loader/document_loader.cc b/third_party/blink/renderer/core/loader/document_loader.cc
--- a/third_party/blink/renderer/core/loader/document_loader.cc
+++ b/third_party/blink/renderer/core/loader/document_loader.cc
@@ -194,13 +194,6 @@ WebVector<int> CopyInitiatorOriginTrials(
 WebVector<int> CopyInitiatorOriginTrials(
     const Vector<OriginTrialFeature>& initiator_origin_trial_features) {
   WebVector<int> result;
-  for (auto feature : initiator_origin_trial_features) {
-    // Convert from OriginTrialFeature to int. These values are passed between
-    // blink navigations. OriginTrialFeature isn't visible outside of blink (and
-    // doesn't need to be) so the values are transferred outside of blink as
-    // ints and casted to OriginTrialFeature once being processed in blink.
-    result.emplace_back(static_cast<int>(feature));
-  }
   return result;
 }
 
--
2.25.1
